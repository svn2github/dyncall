#//////////////////////////////////////////////////////////////////////////////
#
# Copyright (c) 2007,2008 Daniel Adler <dadler@uni-goettingen.de>, 
#                         Tassilo Philipp <tphilipp@potion-studios.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
#//////////////////////////////////////////////////////////////////////////////

#//////////////////////////////////////////////////////////////////////////////
# GNU Make Buildsystem
# GNU Compiler Collection configuration
#//////////////////////////////////////////////////////////////////////////////

CC	= gcc
CXX	= g++
AR	= ar
AS	= as
LD	= ld

OBJ_SUFFIX	= .o
LIB_PREFIX	= lib
LIB_SUFFIX	= .a

# --- Assemble ----------------------------------------------------------------

ifdef BUILD_OS_darwin

else
ASFLAGS		+= --defsym BUILD_OS_$(BUILD_OS)=1 --defsym BUILD_ARCH_$(BUILD_ARCH)=1
endif

$(BUILD_DIR)/%.o: %.s
	$(COMPILE.s) $(OUTPUT_OPTION) $<

# --- C++ Compiler flags ------------------------------------------------------

ifeq ("$(CXX_EXCEPTIONS)","0")
CXXFLAGS	+= -fno-exceptions
endif

ifeq ("$(CXX_RTTI)","0")
CXXFLAGS	+= -fno-rtti
endif

# --- Compile C ---------------------------------------------------------------

$(BUILD_DIR)/%.o: %.c
	$(COMPILE.c) $(OUTPUT_OPTION) $<

# --- Compile C++ -------------------------------------------------------------

$(BUILD_DIR)/%.o: %.cpp
	$(COMPILE.cpp) $(OUTPUT_OPTION) $<

# --- Build static lib --------------------------------------------------------

$(BUILD_DIR)/%.a:
	$(RM) $@
	$(AR) -cr $@ $^

# --- Linking -----------------------------------------------------------------

ifdef LINK_PATHS
LDFLAGS	+=$(foreach X,$(LINK_PATHS),-L$X)
endif

ifdef LINK_LIBS
LDLIBS	+=$(foreach X,$(LINK_LIBS),-l$X)
endif

# --- Build dynamic library ---------------------------------------------------

DLL_SUFFIX ?= .so
$(BUILD_DIR)/%$(DLL_SUFFIX):
	echo unimplemented

# --- Build executable --------------------------------------------------------

LINK	?= "c"
LINKCMD	?= $(CC)

ifeq ("$(LINK)","c++")
LINKCMD=$(CXX)
endif

ifeq ("$(LINK)","c")
LINKCMD=$(CC)
endif

$(BUILD_DIR)/%$(APP_SUFFIX):
	$(LINKCMD) $^ $(LDFLAGS) $(LDLIBS) $(OUTPUT_OPTION) 

