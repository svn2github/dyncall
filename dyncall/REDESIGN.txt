branch 'autodetect' changes:

new build strategy on dyncall:

  building with gcc:
    simplified assembly file compilation through one C Preprocessor switch include:
    
    source file "dyncall_call.S" selects the appropriate GAS/Apple assembly file
    "dyncall_call_<arch>_<asmtool>.[sS]".
    
    archs so far:
    
    arm32_thumb		.s
    arm32_arm		.s
    mips		.s
    ppc32		.s
    x64			.s
    x86			.S  [ uses C macros ]
    
    asmtools:
    
    gas	  - standard GNU assembler
    apple - apple's assembler (based on GNU but is significantly different in syntax)
    masm  - Microsoft assembler x86 and x64
    nasm  - Netwide assembler for x86 and x64
    
    
    NOTE: .S is used for preprocessing assembly files using gcc
          .s is used directly with as
	
  advantages:
    - one way to build the kernel: 
    
       gcc -c dyncall_call.S -o dyncall_call.o
       
    - we can build now universal binaries


update: renaming

- call kernel sources cleanup
  - *_darwin.* -> *_apple.* [apple assembly files]
  - *_windows.* -> *_masm.* [masm assembly files]
  - dyncall_$(ARCH).* -> dyncall_call_$(ARCH).*
  - removed nasm files 
- on x86 (and others probably) we need some magic to decide an _underscore_ prefix must be used
  for the symbol.
- dyncall.c -> dyncall_api.c

feature: simplified builds

- building universal binaries
- simple builds with gcc
- simple builds with msvc

- default CONFIG_PREFIX is /usr/local

notes:
- the old fine-grained control is still available

BSDmake notes:

see buildsys/bsdmake/README.txt

