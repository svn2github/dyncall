Building with generic makefiles
===============================

Description
-----------
Hybrid 'makefiles', compatible with {BSD,GNU}make.
Supports two operating modes: Embedded and Configure.
Project files are specified in Makefile.generic.


Generic Usage
-------------

{g|bsd}make [-f Makefile.generic] [all|clean|install] [INSTALL_TOP=<path>]


Embeeded Mode
-------------
Makefile.generic makefiles are taken as-is directly
without extra configuration.

<VAR1>=<VALUE1> ... bsdmake -f Makefile.generic
MAKEFILE=Makefile.generic <VAR1>=<VALUE1> ... gmake -f Makefile.generic

Example:
  dyncall libraries should compile fine on most platforms:
  
  BSDmake:
  $ bsdmake -f Makefile.generic

  GNUmake:
  $ MAKEFILE=Makefile.generic make -f Makefile.generic

  The tests need sometimes special attention to additional 'usual' libraries such as math and dynamic linker run-time libs.
  $ LDFLAGS="-lm -ldl" make -f Makefile.generic


Configure Mode
--------------

Usage:

  ./configure2 [--prefix=<path>]
  make
  make install [DESTDIR=<path>]

The configure script 'configure2' writes 'Makefile' files that 
include 'Makefile.generic' and setup variables such as 
VPATH, {SRC,BLD}{TOP,DIR}.

Two build types are supported: In-source and out-of-Sosurce.

In 'out-of-source' build type, the configure script is executed from
a different directory - the build directory.
The source directory tree is duplicated into that directory.


Useful Variables
----------------

MAKE_CMD - The make tool (including -f flag) to run sub-directories.
SRCTOP   - Source top-level directory (defaults to relative top).
BLDTOP   - Build  top-level directory (defaults to SRCTOP).
SRCDIR   - Source directory (defaults to '.').
BLDDIR   - Build  directory (defaults to SRCDIR).

e.g. Makefile.generic in source-tree:

SRCTOP ?= ../../../ # relative path to source-top
BLDTOP ?= ${SRCTOP} # defaults for in-source builds
SRCDIR ?= .         # relative path to current directory
BLDDIR ?= ${BLDDIR} # relative path to current directory


Include Directories
-------------------
Use -I${SRCTOP}/... to refer to other include directories.


Link Directories
----------------
Use -L${BLDTOP}/... to refer to other build directories.


Plaform Notes:
--------------
Linux: 
- all: ok.
  make -f Makefile.generic all
- tests: need 'm' and 'dl' libs. 
  ( cd tests ; LDFLAGS="-lm -ldl" make -f Makefile.generic )
- see batch script: buildsys/scripts/batch-build-linux.sh

Minix: No dynload support. No '-fPIC' is allowed.
- dynload: unsupport, no dynamic linker present in Minix 3.
- dyn{call,callback}: ok, without '-fPIC'!
  ( cd dyncall ; CFLAGS= make -f Makefile.generic dyncall dyncallback )
- tests: ok
  ( cd test ; make -f Makefile.generic all-dyncall all-dyncallback )
- see batch script: buildsys/scripts/batch-build-minix.sh

NetBSD/FreeBSD:
- all: ok.
  make -f Makefile.generic all
- tests: need math lib:
  ( cd tests ; LDFLAGS="-lm" make -f Makefile.generic )

OpenBSD:
- all: ok.
  make -f Makefile.generic all
- tests: *.cpp implicit rule not set, therefore only c tests work:
  ( cd tests ; LDFLAGS="-lm" make -f Makefile.generic all-c )
- install: ok.

Haiku Alpha 2:
- dynlaod: unsupport, no elf.h header found.
- dyn{call,callback}: ok.
  make -f Makefile.generic dyncall dyncallback
- tests: ok
  ( cd test ; make -f Makefile.generic all-dyncall all-dyncallback )


Feature:

configure --prefix=<prefix> -> Makefile DESTDIR=variable
make -f Makefile.generic DESTDIR=<prefix>


Todo: integrate with sun's make:

- CXX does not exist.. no rule for *.cpp files but *.cc.
- TARGET_ARCH is predefined with -i386 on x86 and TARGET_MACH is predefined with -i86pc

